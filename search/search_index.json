{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projeto Django - Tela Inicial Introdu\u00e7\u00e3o Este \u00e9 um guia para projeto Adote Um Pet. Ele inclui instru\u00e7\u00f5es sobre como configurar um ambiente virtual, instalar pacotes necess\u00e1rios e executar o projeto. Recomendado: PYTHON >= 3.11 Django == 5.0.3 Como Executar Para executar o projeto, siga as etapas abaixo: 1. Cria\u00e7\u00e3o de Ambiente Virtual Para isolar as depend\u00eancias do projeto, \u00e9 recomend\u00e1vel criar um ambiente virtual. Utilize o seguinte comando: # No diret\u00f3rio do seu projeto python -m venv venv 2. Ativa\u00e7\u00e3o do Ambiente Virtual Windows venv\\Scripts\\activate Linux source venv/bin/activate 3. Instala\u00e7\u00e3o de Pacotes Com o ambiente virtual ativado, instale os pacotes necess\u00e1rios usando o pip : pip install -r requirements.txt Certifique-se de ter um arquivo requirements.txt com as depend\u00eancias do seu projeto. 4. Remova o \"-example do arquivo .env\" Para configurar corretamente o arquivo .env , remova o sufixo -example do nome do arquivo. Cria sua api aqui . https://console.cloud.google.com/project client_id=\"COLOQUE AQUI SUA CLIENT-ID DO API DO GMAIL\" secret=\"COLOQUE AQUI A SECRECT-KEY DO GMAIL\" 5. Execu\u00e7\u00e3o do Projeto Django Ap\u00f3s instalar as depend\u00eancias, voc\u00ea pode rodar o projeto Django: python manage.py runserver O servidor de desenvolvimento ser\u00e1 iniciado e voc\u00ea poder\u00e1 acessar o projeto em http://localhost:8000/ . Conclus\u00e3o Agora voc\u00ea est\u00e1 pronto para come\u00e7ar a desenvolver seu projeto. Certifique-se de manter seu ambiente virtual ativado sempre que estiver trabalhando no projeto. Padr\u00f5es de Codifica\u00e7\u00e3o Neste projeto, adotamos uma abordagem para manter a consist\u00eancia e a legibilidade do c\u00f3digo. Abaixo est\u00e3o as ferramentas e configura\u00e7\u00f5es que utilizamos: Ferramentas de Formata\u00e7\u00e3o de C\u00f3digo Utilizamos as seguintes ferramentas para garantir a padroniza\u00e7\u00e3o do c\u00f3digo: Black : Ferramenta de formata\u00e7\u00e3o de c\u00f3digo Python que garante que todo o c\u00f3digo Python seja formatado de maneira consistente. isort : Utilizado para organizar automaticamente as importa\u00e7\u00f5es em ordem alfab\u00e9tica e agrupadas logicamente. Taskipy : Uma ferramenta que nos permite configurar atalhos para execu\u00e7\u00e3o de comandos comuns, facilitando o processo de padroniza\u00e7\u00e3o e manuten\u00e7\u00e3o do c\u00f3digo. Certifique-se de executar essas ferramentas regularmente para manter o c\u00f3digo formatado corretamente. Configura\u00e7\u00e3o do .editorconfig O arquivo .editorconfig na raiz do projeto define algumas configura\u00e7\u00f5es para garantir a consist\u00eancia do estilo de codifica\u00e7\u00e3o em diferentes editores. Aqui est\u00e1 o conte\u00fado desse arquivo: EditorConfig is awesome: https://EditorConfig.org root = true [*] indent_style = space indent_size = 4 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true Essas configura\u00e7\u00f5es ajudam a manter uma base s\u00f3lida para a formata\u00e7\u00e3o do c\u00f3digo em diferentes ambientes de desenvolvimento. Configura\u00e7\u00e3o do Taskipy Al\u00e9m das configura\u00e7\u00f5es padr\u00e3o para Black e isort, tamb\u00e9m configuramos atalhos \u00fateis usando o Taskipy. Aqui est\u00e1 um exemplo de configura\u00e7\u00e3o no arquivo pyproject.toml : [tool.pytest.ini_options] pythonpath = \".\" addopts = \"--doctest-modules\" [tool.isort] profile = \"black\" line_length = 79 [tool.taskipy.tasks] check = \"black --check --diff . && isort --check --diff .\" correct = \"black . && isort .\" docs = \"mkdocs serve\" test = \"pytest -s -x -vv\" post_test = \"coverage html\" Com esses atalhos configurados, podemos executar tarefas comuns de padroniza\u00e7\u00e3o e teste com facilidade, por exemplo: task check : Verifica se o c\u00f3digo est\u00e1 formatado corretamente e as importa\u00e7\u00f5es est\u00e3o ordenadas. task correct : Formata o c\u00f3digo e organiza as importa\u00e7\u00f5es de acordo com as configura\u00e7\u00f5es definidas. task docs : Inicia o servidor de desenvolvimento do MkDocs para visualiza\u00e7\u00e3o da documenta\u00e7\u00e3o. task test : Executa os testes com o Pytest, exibindo informa\u00e7\u00f5es detalhadas. task post_test : Gera relat\u00f3rios de cobertura ap\u00f3s a execu\u00e7\u00e3o dos testes.","title":"Home"},{"location":"#projeto-django-tela-inicial","text":"","title":"Projeto Django - Tela Inicial"},{"location":"#introducao","text":"Este \u00e9 um guia para projeto Adote Um Pet. Ele inclui instru\u00e7\u00f5es sobre como configurar um ambiente virtual, instalar pacotes necess\u00e1rios e executar o projeto.","title":"Introdu\u00e7\u00e3o"},{"location":"#recomendado","text":"PYTHON >= 3.11 Django == 5.0.3","title":"Recomendado:"},{"location":"#como-executar","text":"Para executar o projeto, siga as etapas abaixo:","title":"Como Executar"},{"location":"#1-criacao-de-ambiente-virtual","text":"Para isolar as depend\u00eancias do projeto, \u00e9 recomend\u00e1vel criar um ambiente virtual. Utilize o seguinte comando: # No diret\u00f3rio do seu projeto python -m venv venv","title":"1. Cria\u00e7\u00e3o de Ambiente Virtual"},{"location":"#2-ativacao-do-ambiente-virtual","text":"","title":"2. Ativa\u00e7\u00e3o do Ambiente Virtual"},{"location":"#windows","text":"venv\\Scripts\\activate","title":"Windows"},{"location":"#linux","text":"source venv/bin/activate","title":"Linux"},{"location":"#3-instalacao-de-pacotes","text":"Com o ambiente virtual ativado, instale os pacotes necess\u00e1rios usando o pip : pip install -r requirements.txt Certifique-se de ter um arquivo requirements.txt com as depend\u00eancias do seu projeto.","title":"3. Instala\u00e7\u00e3o de Pacotes"},{"location":"#4-remova-o-example-do-arquivo-env","text":"Para configurar corretamente o arquivo .env , remova o sufixo -example do nome do arquivo. Cria sua api aqui . https://console.cloud.google.com/project client_id=\"COLOQUE AQUI SUA CLIENT-ID DO API DO GMAIL\" secret=\"COLOQUE AQUI A SECRECT-KEY DO GMAIL\"","title":"4. Remova o \"-example do arquivo .env\""},{"location":"#5-execucao-do-projeto-django","text":"Ap\u00f3s instalar as depend\u00eancias, voc\u00ea pode rodar o projeto Django: python manage.py runserver O servidor de desenvolvimento ser\u00e1 iniciado e voc\u00ea poder\u00e1 acessar o projeto em http://localhost:8000/ .","title":"5. Execu\u00e7\u00e3o do Projeto Django"},{"location":"#conclusao","text":"Agora voc\u00ea est\u00e1 pronto para come\u00e7ar a desenvolver seu projeto. Certifique-se de manter seu ambiente virtual ativado sempre que estiver trabalhando no projeto.","title":"Conclus\u00e3o"},{"location":"#padroes-de-codificacao","text":"Neste projeto, adotamos uma abordagem para manter a consist\u00eancia e a legibilidade do c\u00f3digo. Abaixo est\u00e3o as ferramentas e configura\u00e7\u00f5es que utilizamos:","title":"Padr\u00f5es de Codifica\u00e7\u00e3o"},{"location":"#ferramentas-de-formatacao-de-codigo","text":"Utilizamos as seguintes ferramentas para garantir a padroniza\u00e7\u00e3o do c\u00f3digo: Black : Ferramenta de formata\u00e7\u00e3o de c\u00f3digo Python que garante que todo o c\u00f3digo Python seja formatado de maneira consistente. isort : Utilizado para organizar automaticamente as importa\u00e7\u00f5es em ordem alfab\u00e9tica e agrupadas logicamente. Taskipy : Uma ferramenta que nos permite configurar atalhos para execu\u00e7\u00e3o de comandos comuns, facilitando o processo de padroniza\u00e7\u00e3o e manuten\u00e7\u00e3o do c\u00f3digo. Certifique-se de executar essas ferramentas regularmente para manter o c\u00f3digo formatado corretamente.","title":"Ferramentas de Formata\u00e7\u00e3o de C\u00f3digo"},{"location":"#configuracao-do-editorconfig","text":"O arquivo .editorconfig na raiz do projeto define algumas configura\u00e7\u00f5es para garantir a consist\u00eancia do estilo de codifica\u00e7\u00e3o em diferentes editores. Aqui est\u00e1 o conte\u00fado desse arquivo: EditorConfig is awesome: https://EditorConfig.org root = true [*] indent_style = space indent_size = 4 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true Essas configura\u00e7\u00f5es ajudam a manter uma base s\u00f3lida para a formata\u00e7\u00e3o do c\u00f3digo em diferentes ambientes de desenvolvimento.","title":"Configura\u00e7\u00e3o do .editorconfig"},{"location":"#configuracao-do-taskipy","text":"Al\u00e9m das configura\u00e7\u00f5es padr\u00e3o para Black e isort, tamb\u00e9m configuramos atalhos \u00fateis usando o Taskipy. Aqui est\u00e1 um exemplo de configura\u00e7\u00e3o no arquivo pyproject.toml : [tool.pytest.ini_options] pythonpath = \".\" addopts = \"--doctest-modules\" [tool.isort] profile = \"black\" line_length = 79 [tool.taskipy.tasks] check = \"black --check --diff . && isort --check --diff .\" correct = \"black . && isort .\" docs = \"mkdocs serve\" test = \"pytest -s -x -vv\" post_test = \"coverage html\" Com esses atalhos configurados, podemos executar tarefas comuns de padroniza\u00e7\u00e3o e teste com facilidade, por exemplo: task check : Verifica se o c\u00f3digo est\u00e1 formatado corretamente e as importa\u00e7\u00f5es est\u00e3o ordenadas. task correct : Formata o c\u00f3digo e organiza as importa\u00e7\u00f5es de acordo com as configura\u00e7\u00f5es definidas. task docs : Inicia o servidor de desenvolvimento do MkDocs para visualiza\u00e7\u00e3o da documenta\u00e7\u00e3o. task test : Executa os testes com o Pytest, exibindo informa\u00e7\u00f5es detalhadas. task post_test : Gera relat\u00f3rios de cobertura ap\u00f3s a execu\u00e7\u00e3o dos testes.","title":"Configura\u00e7\u00e3o do Taskipy"},{"location":"settings/","text":"Configura\u00e7\u00f5es do Django para o projeto setup. Gerado pelo 'django-admin startproject' usando Django 5.0.3. Para mais informa\u00e7\u00f5es sobre este arquivo, consulte a documenta\u00e7\u00e3o oficial . Para a lista completa de configura\u00e7\u00f5es e seus valores, consulte a documenta\u00e7\u00e3o oficial . Django Configura\u00e7\u00e3o Social-Account Este trecho de c\u00f3digo Python configura as informa\u00e7\u00f5es de autentica\u00e7\u00e3o OAuth para a integra\u00e7\u00e3o de login social com a conta do Google em uma aplica\u00e7\u00e3o Django. Ele \u00e9 usado para definir as credenciais do cliente necess\u00e1rias para autenticar e autorizar usu\u00e1rios por meio do Google. https://docs.allauth.org/en/latest/ SOCIALACCOUNT_PROVIDERS = { \"google\": { # Para cada provedor baseado em OAuth, adicione um objeto ``SocialApp`` # (aplicativo ``socialaccount``) contendo as credenciais de cliente necess\u00e1rias, # ou liste-as aqui: \"APP\": { \"client_id\": os.getenv(\"client_id\"), \"secret\": os.getenv(\"secret\"), \"key\": \"\", } } }","title":"Setup"},{"location":"settings/#configuracoes-do-django-para-o-projeto-setup","text":"Gerado pelo 'django-admin startproject' usando Django 5.0.3. Para mais informa\u00e7\u00f5es sobre este arquivo, consulte a documenta\u00e7\u00e3o oficial . Para a lista completa de configura\u00e7\u00f5es e seus valores, consulte a documenta\u00e7\u00e3o oficial .","title":"Configura\u00e7\u00f5es do Django para o projeto setup."},{"location":"settings/#django-configuracao-social-account","text":"Este trecho de c\u00f3digo Python configura as informa\u00e7\u00f5es de autentica\u00e7\u00e3o OAuth para a integra\u00e7\u00e3o de login social com a conta do Google em uma aplica\u00e7\u00e3o Django. Ele \u00e9 usado para definir as credenciais do cliente necess\u00e1rias para autenticar e autorizar usu\u00e1rios por meio do Google. https://docs.allauth.org/en/latest/ SOCIALACCOUNT_PROVIDERS = { \"google\": { # Para cada provedor baseado em OAuth, adicione um objeto ``SocialApp`` # (aplicativo ``socialaccount``) contendo as credenciais de cliente necess\u00e1rias, # ou liste-as aqui: \"APP\": { \"client_id\": os.getenv(\"client_id\"), \"secret\": os.getenv(\"secret\"), \"key\": \"\", } } }","title":"Django Configura\u00e7\u00e3o Social-Account"}]}